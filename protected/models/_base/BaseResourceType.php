<?php

/**
 * This is the model base class for the table "resource_type".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ResourceType".
 *
 * Columns in table "resource_type" available as properties of the model,
 * followed by relations of table "resource_type" available as properties of the model.
 *
 * @property integer $id
 * @property string $description
 * @property integer $resource_category_id
 * @property integer $maximum
 * @property integer $deleted
 *
 * @property Resourcecategory $resourceCategory
 * @property Task[] $tasks
 */
abstract class BaseResourceType extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'resource_type';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ResourceType|ResourceTypes', $n);
	}

	public static function representingColumn() {
		return 'description';
	}

	public function rules() {
		return array(
			array('description, maximum', 'required'),
			array('resource_category_id, maximum, deleted', 'numerical', 'integerOnly'=>true),
			array('description', 'length', 'max'=>64),
			array('resource_category_id, deleted', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, description, resource_category_id, maximum, deleted', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'resourceCategory' => array(self::BELONGS_TO, 'Resourcecategory', 'resource_category_id'),
			'tasks' => array(self::MANY_MANY, 'Task', 'task_to_resource_type(resource_type_id, task_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'tasks' => 'TaskToResourceType',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'description' => Yii::t('app', 'Description'),
			'resource_category_id' => null,
			'maximum' => Yii::t('app', 'Maximum'),
			'deleted' => Yii::t('app', 'Deleted'),
			'resourceCategory' => null,
			'tasks' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('resource_category_id', $this->resource_category_id);
		$criteria->compare('maximum', $this->maximum);
		$criteria->compare('deleted', $this->deleted);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}