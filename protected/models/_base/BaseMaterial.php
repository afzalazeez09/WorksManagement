<?php

/**
 * This is the model base class for the table "material".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Material".
 *
 * Columns in table "material" available as properties of the model,
 * followed by relations of table "material" available as properties of the model.
 *
 * @property integer $id
 * @property string $description
 * @property integer $deleted
 * @property integer $staff_id
 *
 * @property Assembly[] $assemblies
 * @property Staff $staff
 * @property Task[] $tasks
 */
abstract class BaseMaterial extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'material';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Material|Materials', $n);
	}

	public static function representingColumn() {
		return 'description';
	}

	public function rules() {
		return array(
			array('description, staff_id', 'required'),
			array('deleted, staff_id', 'numerical', 'integerOnly'=>true),
			array('description', 'length', 'max'=>255),
			array('deleted', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, description, deleted, staff_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'assemblies' => array(self::HAS_MANY, 'Assembly', 'material_id'),
			'staff' => array(self::BELONGS_TO, 'Staff', 'staff_id'),
			'tasks' => array(self::MANY_MANY, 'Task', 'material_to_task(material_id, task_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'tasks' => 'MaterialToTask',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'description' => Yii::t('app', 'Description'),
			'deleted' => Yii::t('app', 'Deleted'),
			'staff_id' => null,
			'assemblies' => null,
			'staff' => null,
			'tasks' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('deleted', $this->deleted);
		$criteria->compare('staff_id', $this->staff_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}