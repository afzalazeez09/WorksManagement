<?php

/**
 * This is the model base class for the table "staff".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Staff".
 *
 * Columns in table "staff" available as properties of the model,
 * followed by relations of table "staff" available as properties of the model.
 *
 * @property integer $id
 * @property string $first_name
 * @property string $last_name
 * @property string $phone_mobile
 * @property string $username
 * @property string $password
 * @property integer $deleted
 * @property integer $staff_id
 *
 * @property AuthAssignment[] $authAssignments
 * @property AuthAssignment[] $authAssignments1
 * @property AuthItem[] $authItems
 * @property Assembly[] $assemblies
 * @property Client[] $clients
 * @property ClientToTaskTypeToDutyType[] $clientToTaskTypeToDutyTypes
 * @property Crew[] $crews
 * @property Crew[] $crews1
 * @property Day[] $days
 * @property DutyType[] $dutyTypes
 * @property Generic[] $generics
 * @property GenericProjectType[] $genericProjectTypes
 * @property GenericTaskType[] $genericTaskTypes
 * @property GenericType[] $genericTypes
 * @property Genericprojectcategory[] $genericprojectcategories
 * @property Generictaskcategory[] $generictaskcategories
 * @property Material[] $materials
 * @property Plan[] $plans
 * @property Project[] $projects
 * @property PurchaseOrders[] $purchaseOrders
 * @property Reschedule[] $reschedules
 * @property Staff $staff
 * @property Staff[] $staffs
 * @property Supplier[] $suppliers
 * @property Task[] $tasks
 * @property TaskToGenericTaskType[] $taskToGenericTaskTypes
 * @property TaskType[] $taskTypes
 */
abstract class BaseStaff extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'staff';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Staff|Staffs', $n);
	}

	public static function representingColumn() {
		return 'first_name';
	}

	public function rules() {
		return array(
			array('first_name, last_name, username, staff_id', 'required'),
			array('deleted, staff_id', 'numerical', 'integerOnly'=>true),
			array('first_name, last_name, phone_mobile, username', 'length', 'max'=>64),
			array('password', 'length', 'max'=>32),
			array('phone_mobile, password, deleted', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, first_name, last_name, phone_mobile, username, password, deleted, staff_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'authAssignments' => array(self::HAS_MANY, 'AuthAssignment', 'userid'),
			'authAssignments1' => array(self::HAS_MANY, 'AuthAssignment', 'staff_id'),
			'authItems' => array(self::HAS_MANY, 'AuthItem', 'staff_id'),
			'assemblies' => array(self::HAS_MANY, 'Assembly', 'staff_id'),
			'clients' => array(self::HAS_MANY, 'Client', 'staff_id'),
			'clientToTaskTypeToDutyTypes' => array(self::HAS_MANY, 'ClientToTaskTypeToDutyType', 'staff_id'),
			'crews' => array(self::HAS_MANY, 'Crew', 'in_charge'),
			'crews1' => array(self::HAS_MANY, 'Crew', 'staff_id'),
			'days' => array(self::HAS_MANY, 'Day', 'staff_id'),
			'dutyTypes' => array(self::HAS_MANY, 'DutyType', 'staff_id'),
			'generics' => array(self::HAS_MANY, 'Generic', 'staff_id'),
			'genericProjectTypes' => array(self::HAS_MANY, 'GenericProjectType', 'staff_id'),
			'genericTaskTypes' => array(self::HAS_MANY, 'GenericTaskType', 'staff_id'),
			'genericTypes' => array(self::HAS_MANY, 'GenericType', 'staff_id'),
			'genericprojectcategories' => array(self::HAS_MANY, 'Genericprojectcategory', 'staff_id'),
			'generictaskcategories' => array(self::HAS_MANY, 'Generictaskcategory', 'staff_id'),
			'materials' => array(self::HAS_MANY, 'Material', 'staff_id'),
			'plans' => array(self::HAS_MANY, 'Plan', 'staff_id'),
			'projects' => array(self::HAS_MANY, 'Project', 'staff_id'),
			'purchaseOrders' => array(self::HAS_MANY, 'PurchaseOrders', 'staff_id'),
			'reschedules' => array(self::HAS_MANY, 'Reschedule', 'staff_id'),
			'staff' => array(self::BELONGS_TO, 'Staff', 'staff_id'),
			'staffs' => array(self::HAS_MANY, 'Staff', 'staff_id'),
			'suppliers' => array(self::HAS_MANY, 'Supplier', 'staff_id'),
			'tasks' => array(self::HAS_MANY, 'Task', 'staff_id'),
			'taskToGenericTaskTypes' => array(self::HAS_MANY, 'TaskToGenericTaskType', 'staff_id'),
			'taskTypes' => array(self::HAS_MANY, 'TaskType', 'staff_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'first_name' => Yii::t('app', 'First Name'),
			'last_name' => Yii::t('app', 'Last Name'),
			'phone_mobile' => Yii::t('app', 'Phone Mobile'),
			'username' => Yii::t('app', 'Username'),
			'password' => Yii::t('app', 'Password'),
			'deleted' => Yii::t('app', 'Deleted'),
			'staff_id' => null,
			'authAssignments' => null,
			'authAssignments1' => null,
			'authItems' => null,
			'assemblies' => null,
			'clients' => null,
			'clientToTaskTypeToDutyTypes' => null,
			'crews' => null,
			'crews1' => null,
			'days' => null,
			'dutyTypes' => null,
			'generics' => null,
			'genericProjectTypes' => null,
			'genericTaskTypes' => null,
			'genericTypes' => null,
			'genericprojectcategories' => null,
			'generictaskcategories' => null,
			'materials' => null,
			'plans' => null,
			'projects' => null,
			'purchaseOrders' => null,
			'reschedules' => null,
			'staff' => null,
			'staffs' => null,
			'suppliers' => null,
			'tasks' => null,
			'taskToGenericTaskTypes' => null,
			'taskTypes' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('first_name', $this->first_name, true);
		$criteria->compare('last_name', $this->last_name, true);
		$criteria->compare('phone_mobile', $this->phone_mobile, true);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('deleted', $this->deleted);
		$criteria->compare('staff_id', $this->staff_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}